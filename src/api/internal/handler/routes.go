// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	deckopen "SpaceRepetition/src/api/internal/handler/deckopen"
	decks "SpaceRepetition/src/api/internal/handler/decks"
	knowledge "SpaceRepetition/src/api/internal/handler/knowledge"
	user "SpaceRepetition/src/api/internal/handler/user"
	"SpaceRepetition/src/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/login",
				Handler: user.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/allfloder",
				Handler: decks.GetAllFloderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/floderdetail",
				Handler: decks.GetFloderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/adddeck",
				Handler: decks.AddDeckHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/addfloder",
				Handler: decks.AddFloderHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/decks"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/open",
				Handler: deckopen.OpenDeckHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/addsection",
				Handler: deckopen.AddSectionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/cardOnLearning",
				Handler: deckopen.CardOnLearningHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/cardNoLearning",
				Handler: deckopen.CardNoLearningHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/addtoreview",
				Handler: deckopen.AddToReviewHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/decks"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addknowledge",
				Handler: knowledge.AddknowledgeHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/deleteknowledge",
				Handler: knowledge.DeleteKnowledgeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getReviewingList",
				Handler: knowledge.GetReviewingListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/review",
				Handler: knowledge.ReviewHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/decks"),
	)
}
