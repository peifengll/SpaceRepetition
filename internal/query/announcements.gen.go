// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/peifengll/SpaceRepetition/internal/model"
)

func newAnnouncement(db *gorm.DB, opts ...gen.DOOption) announcement {
	_announcement := announcement{}

	_announcement.announcementDo.UseDB(db, opts...)
	_announcement.announcementDo.UseModel(&model.Announcement{})

	tableName := _announcement.announcementDo.TableName()
	_announcement.ALL = field.NewAsterisk(tableName)
	_announcement.ID = field.NewInt64(tableName, "id")
	_announcement.AdminID = field.NewInt64(tableName, "admin_id")
	_announcement.Title = field.NewString(tableName, "title")
	_announcement.Content = field.NewString(tableName, "content")
	_announcement.PublishTime = field.NewTime(tableName, "publish_time")

	_announcement.fillFieldMap()

	return _announcement
}

type announcement struct {
	announcementDo

	ALL         field.Asterisk
	ID          field.Int64
	AdminID     field.Int64
	Title       field.String
	Content     field.String
	PublishTime field.Time

	fieldMap map[string]field.Expr
}

func (a announcement) Table(newTableName string) *announcement {
	a.announcementDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a announcement) As(alias string) *announcement {
	a.announcementDo.DO = *(a.announcementDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *announcement) updateTableName(table string) *announcement {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdminID = field.NewInt64(table, "admin_id")
	a.Title = field.NewString(table, "title")
	a.Content = field.NewString(table, "content")
	a.PublishTime = field.NewTime(table, "publish_time")

	a.fillFieldMap()

	return a
}

func (a *announcement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *announcement) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["title"] = a.Title
	a.fieldMap["content"] = a.Content
	a.fieldMap["publish_time"] = a.PublishTime
}

func (a announcement) clone(db *gorm.DB) announcement {
	a.announcementDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a announcement) replaceDB(db *gorm.DB) announcement {
	a.announcementDo.ReplaceDB(db)
	return a
}

type announcementDo struct{ gen.DO }

type IAnnouncementDo interface {
	gen.SubQuery
	Debug() IAnnouncementDo
	WithContext(ctx context.Context) IAnnouncementDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnnouncementDo
	WriteDB() IAnnouncementDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnnouncementDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnnouncementDo
	Not(conds ...gen.Condition) IAnnouncementDo
	Or(conds ...gen.Condition) IAnnouncementDo
	Select(conds ...field.Expr) IAnnouncementDo
	Where(conds ...gen.Condition) IAnnouncementDo
	Order(conds ...field.Expr) IAnnouncementDo
	Distinct(cols ...field.Expr) IAnnouncementDo
	Omit(cols ...field.Expr) IAnnouncementDo
	Join(table schema.Tabler, on ...field.Expr) IAnnouncementDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnnouncementDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnnouncementDo
	Group(cols ...field.Expr) IAnnouncementDo
	Having(conds ...gen.Condition) IAnnouncementDo
	Limit(limit int) IAnnouncementDo
	Offset(offset int) IAnnouncementDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnnouncementDo
	Unscoped() IAnnouncementDo
	Create(values ...*model.Announcement) error
	CreateInBatches(values []*model.Announcement, batchSize int) error
	Save(values ...*model.Announcement) error
	First() (*model.Announcement, error)
	Take() (*model.Announcement, error)
	Last() (*model.Announcement, error)
	Find() ([]*model.Announcement, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Announcement, err error)
	FindInBatches(result *[]*model.Announcement, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Announcement) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnnouncementDo
	Assign(attrs ...field.AssignExpr) IAnnouncementDo
	Joins(fields ...field.RelationField) IAnnouncementDo
	Preload(fields ...field.RelationField) IAnnouncementDo
	FirstOrInit() (*model.Announcement, error)
	FirstOrCreate() (*model.Announcement, error)
	FindByPage(offset int, limit int) (result []*model.Announcement, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnnouncementDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a announcementDo) Debug() IAnnouncementDo {
	return a.withDO(a.DO.Debug())
}

func (a announcementDo) WithContext(ctx context.Context) IAnnouncementDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a announcementDo) ReadDB() IAnnouncementDo {
	return a.Clauses(dbresolver.Read)
}

func (a announcementDo) WriteDB() IAnnouncementDo {
	return a.Clauses(dbresolver.Write)
}

func (a announcementDo) Session(config *gorm.Session) IAnnouncementDo {
	return a.withDO(a.DO.Session(config))
}

func (a announcementDo) Clauses(conds ...clause.Expression) IAnnouncementDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a announcementDo) Returning(value interface{}, columns ...string) IAnnouncementDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a announcementDo) Not(conds ...gen.Condition) IAnnouncementDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a announcementDo) Or(conds ...gen.Condition) IAnnouncementDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a announcementDo) Select(conds ...field.Expr) IAnnouncementDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a announcementDo) Where(conds ...gen.Condition) IAnnouncementDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a announcementDo) Order(conds ...field.Expr) IAnnouncementDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a announcementDo) Distinct(cols ...field.Expr) IAnnouncementDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a announcementDo) Omit(cols ...field.Expr) IAnnouncementDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a announcementDo) Join(table schema.Tabler, on ...field.Expr) IAnnouncementDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a announcementDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnnouncementDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a announcementDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnnouncementDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a announcementDo) Group(cols ...field.Expr) IAnnouncementDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a announcementDo) Having(conds ...gen.Condition) IAnnouncementDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a announcementDo) Limit(limit int) IAnnouncementDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a announcementDo) Offset(offset int) IAnnouncementDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a announcementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnnouncementDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a announcementDo) Unscoped() IAnnouncementDo {
	return a.withDO(a.DO.Unscoped())
}

func (a announcementDo) Create(values ...*model.Announcement) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a announcementDo) CreateInBatches(values []*model.Announcement, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a announcementDo) Save(values ...*model.Announcement) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a announcementDo) First() (*model.Announcement, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Announcement), nil
	}
}

func (a announcementDo) Take() (*model.Announcement, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Announcement), nil
	}
}

func (a announcementDo) Last() (*model.Announcement, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Announcement), nil
	}
}

func (a announcementDo) Find() ([]*model.Announcement, error) {
	result, err := a.DO.Find()
	return result.([]*model.Announcement), err
}

func (a announcementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Announcement, err error) {
	buf := make([]*model.Announcement, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a announcementDo) FindInBatches(result *[]*model.Announcement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a announcementDo) Attrs(attrs ...field.AssignExpr) IAnnouncementDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a announcementDo) Assign(attrs ...field.AssignExpr) IAnnouncementDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a announcementDo) Joins(fields ...field.RelationField) IAnnouncementDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a announcementDo) Preload(fields ...field.RelationField) IAnnouncementDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a announcementDo) FirstOrInit() (*model.Announcement, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Announcement), nil
	}
}

func (a announcementDo) FirstOrCreate() (*model.Announcement, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Announcement), nil
	}
}

func (a announcementDo) FindByPage(offset int, limit int) (result []*model.Announcement, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a announcementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a announcementDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a announcementDo) Delete(models ...*model.Announcement) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *announcementDo) withDO(do gen.Dao) *announcementDo {
	a.DO = *do.(*gen.DO)
	return a
}
