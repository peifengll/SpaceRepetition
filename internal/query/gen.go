// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Admin        *admin
	Announcement *announcement
	Deck         *deck
	Floder       *floder
	Knowledge    *knowledge
	Record       *record
	Section      *section
	User         *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Admin = &Q.Admin
	Announcement = &Q.Announcement
	Deck = &Q.Deck
	Floder = &Q.Floder
	Knowledge = &Q.Knowledge
	Record = &Q.Record
	Section = &Q.Section
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Admin:        newAdmin(db, opts...),
		Announcement: newAnnouncement(db, opts...),
		Deck:         newDeck(db, opts...),
		Floder:       newFloder(db, opts...),
		Knowledge:    newKnowledge(db, opts...),
		Record:       newRecord(db, opts...),
		Section:      newSection(db, opts...),
		User:         newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Admin        admin
	Announcement announcement
	Deck         deck
	Floder       floder
	Knowledge    knowledge
	Record       record
	Section      section
	User         user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Admin:        q.Admin.clone(db),
		Announcement: q.Announcement.clone(db),
		Deck:         q.Deck.clone(db),
		Floder:       q.Floder.clone(db),
		Knowledge:    q.Knowledge.clone(db),
		Record:       q.Record.clone(db),
		Section:      q.Section.clone(db),
		User:         q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Admin:        q.Admin.replaceDB(db),
		Announcement: q.Announcement.replaceDB(db),
		Deck:         q.Deck.replaceDB(db),
		Floder:       q.Floder.replaceDB(db),
		Knowledge:    q.Knowledge.replaceDB(db),
		Record:       q.Record.replaceDB(db),
		Section:      q.Section.replaceDB(db),
		User:         q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Admin        IAdminDo
	Announcement IAnnouncementDo
	Deck         IDeckDo
	Floder       IFloderDo
	Knowledge    IKnowledgeDo
	Record       IRecordDo
	Section      ISectionDo
	User         IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:        q.Admin.WithContext(ctx),
		Announcement: q.Announcement.WithContext(ctx),
		Deck:         q.Deck.WithContext(ctx),
		Floder:       q.Floder.WithContext(ctx),
		Knowledge:    q.Knowledge.WithContext(ctx),
		Record:       q.Record.WithContext(ctx),
		Section:      q.Section.WithContext(ctx),
		User:         q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
